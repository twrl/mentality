{"version":3,"file":"dexie-observable.js","sources":["../C:/repos/dexie-release/addons/Dexie.Observable/tools/tmp/src/Dexie.Observable.js"],"sourcesContent":["/// <reference path=\"../../../dist/dexie.js\" />\n\n/**\r\n * Dexie.Observable.js\r\n * ===================\r\n * Dexie addon for observing database changes not just on local db instance but also on other instances and windows.\r\n *\r\n * version: {version} Alpha, {date}\r\n *\r\n * Disclaimber: This addon is in alpha status meaning that\r\n * its API and behavior may change.\r\n *\r\n */\nimport Dexie from 'dexie';\n\nvar global = self;\n\n/** class DatabaseChange\r\n    *\r\n    *  Object contained by the _changes table.\r\n    */\nvar DatabaseChange = Dexie.defineClass({\n    rev: Number, // Auto-incremented primary key\n    source: String, // Optional source creating the change. Set if transaction.source was set when doing the operation.\n    table: String, // Table name\n    key: Object, // Primary key. Any type.\n    type: Number, // 1 = CREATE, 2 = UPDATE, 3 = DELETE\n    obj: Object, // CREATE: obj contains the object created.\n    mods: Object, // UPDATE: mods contains the modifications made to the object.\n    oldObj: Object // DELETE: oldObj contains the object deleted. UPDATE: oldObj contains the old object before updates applied.\n});\n\n// Import some usable helper functions\nvar override = Dexie.override;\nvar Promise = Dexie.Promise;\nvar browserIsShuttingDown = false;\n\nexport default function Observable(db) {\n    /// <summary>\n    ///   Extension to Dexie providing Syncronization capabilities to Dexie.\n    /// </summary>\n    /// <param name=\"db\" type=\"Dexie\"></param>\n\n    var NODE_TIMEOUT = 20000,\n        // 20 seconds before local db instances are timed out. This is so that old changes can be deleted when not needed and to garbage collect old _syncNodes objects.\n    HIBERNATE_GRACE_PERIOD = 20000,\n        // 20 seconds\n    // LOCAL_POLL: The time to wait before polling local db for changes and cleaning up old nodes.\n    // Polling for changes is a fallback only needed in certain circomstances (when the onstorage event doesnt reach all listeners - when different browser windows doesnt share the same process)\n    LOCAL_POLL = 2000,\n        // 1 second. In real-world there will be this value + the time it takes to poll().\n    CREATE = 1,\n        UPDATE = 2,\n        DELETE = 3;\n\n    var localStorage = Observable.localStorageImpl;\n\n    /** class SyncNode\r\n        *\r\n        * Object contained in the _syncNodes table.\r\n        */\n    var SyncNode = Dexie.defineClass({\n        //id: Number,\n        myRevision: Number,\n        type: String, // \"local\" or \"remote\"\n        lastHeartBeat: Number,\n        deleteTimeStamp: Number, // In case lastHeartBeat is too old, a value of now + HIBERNATE_GRACE_PERIOD will be set here. If reached before node wakes up, node will be deleted.\n        url: String, // Only applicable for \"remote\" nodes. Only used in Dexie.Syncable.\n        isMaster: Number, // 1 if true. Not using Boolean because it's not possible to index Booleans in IE implementation of IDB.\n\n        // Below properties should be extended in Dexie.Syncable. Not here. They apply to remote nodes only (type == \"remote\"):\n        syncProtocol: String, // Tells which implementation of ISyncProtocol to use for remote syncing.\n        syncContext: null,\n        syncOptions: Object,\n        connected: false, // FIXTHIS: Remove! Replace with status.\n        status: Number,\n        appliedRemoteRevision: null,\n        remoteBaseRevisions: [{ local: Number, remote: null }],\n        dbUploadState: {\n            tablesToUpload: [String],\n            currentTable: String,\n            currentKey: null,\n            localBaseRevision: Number\n        }\n    });\n\n    var mySyncNode = null;\n\n    // Allow other addons to access the local sync node. May be needed by Dexie.Syncable.\n    Object.defineProperty(db, \"_localSyncNode\", {\n        get: function () {\n            return mySyncNode;\n        }\n    });\n\n    var pollHandle = null;\n\n    if (Dexie.fake) {\n        // This code will never run.\n        // It's here just to enable auto-complete in visual studio - helps a lot when writing code.\n        db.version(1).stores({\n            _syncNodes: \"++id,myRevision,lastHeartBeat\",\n            _changes: \"++rev\",\n            _intercomm: \"++id,destinationNode\",\n            _uncommittedChanges: \"++id,node\"\n        });\n        db._syncNodes.mapToClass(SyncNode);\n        db._changes.mapToClass(DatabaseChange);\n        mySyncNode = new SyncNode({\n            myRevision: 0,\n            type: \"local\",\n            lastHeartBeat: Date.now(),\n            deleteTimeStamp: null\n        });\n    }\n\n    //\n    // Override parsing the stores to add \"_changes\" and \"_syncNodes\" tables.\n    //\n    db.Version.prototype._parseStoresSpec = override(db.Version.prototype._parseStoresSpec, function (origFunc) {\n        return function (stores, dbSchema) {\n            // Create the _changes and _syncNodes tables\n            stores[\"_changes\"] = \"++rev\";\n            stores[\"_syncNodes\"] = \"++id,myRevision,lastHeartBeat,url,isMaster,type,status\";\n            stores[\"_intercomm\"] = \"++id,destinationNode\";\n            stores[\"_uncommittedChanges\"] = \"++id,node\"; // For remote syncing when server returns a partial result.\n            // Call default implementation. Will populate the dbSchema structures.\n            origFunc.call(this, stores, dbSchema);\n            // Allow UUID primary keys using $$ prefix on primary key or indexes\n            Object.keys(dbSchema).forEach(function (tableName) {\n                var schema = dbSchema[tableName];\n                if (schema.primKey.name.indexOf('$$') === 0) {\n                    schema.primKey.uuid = true;\n                    schema.primKey.name = schema.primKey.name.substr(2);\n                    schema.primKey.keyPath = schema.primKey.keyPath.substr(2);\n                }\n            });\n            // Now mark all observable tables\n            Object.keys(dbSchema).forEach(function (tableName) {\n                // Marked observable tables with \"observable\" in their TableSchema.\n                if (tableName.indexOf('_') !== 0 && tableName.indexOf('$') !== 0) {\n                    dbSchema[tableName].observable = true;\n                }\n            });\n        };\n    });\n\n    //\n    // Make sure to subscribe to \"creating\", \"updating\" and \"deleting\" hooks for all observable tables that were created in the stores() method.\n    //\n    db._tableFactory = override(db._tableFactory, function (origCreateTable) {\n        return function createTable(mode, tableSchema, transactionPromiseFactory) {\n            var table = origCreateTable.apply(this, arguments);\n            if (table.schema.observable && transactionPromiseFactory === db._transPromiseFactory) {\n                // Only crudMonitor when creating\n                crudMonitor(table);\n            }\n            if (table.name === \"_syncNodes\" && transactionPromiseFactory === db._transPromiseFactory) {\n                table.mapToClass(SyncNode);\n            }\n            return table;\n        };\n    });\n\n    // changes event on db:\n    db.on.addEventType({\n        changes: 'asap',\n        cleanup: [promisableChain, nop], // fire (nodesTable, changesTable, trans). Hook called when cleaning up nodes. Subscribers may return a Promise to to more stuff. May do additional stuff if local sync node is master.\n        message: 'asap'\n    });\n\n    //\n    // Overide transaction creation to always include the \"_changes\" store when any observable store is involved.\n    //\n    db._createTransaction = override(db._createTransaction, function (origFunc) {\n        return function (mode, storenames, dbschema, parent) {\n            if (db.dynamicallyOpened()) return origFunc.apply(this, arguments); // Don't observe dynamically opened databases.\n            var addChanges = false;\n            if (mode === 'readwrite' && storenames.some(function (storeName) {\n                return dbschema[storeName] && dbschema[storeName].observable;\n            })) {\n                // At least one included store is a observable store. Make sure to also include the _changes store.\n                addChanges = true;\n                storenames = storenames.slice(0); // Clone\n                if (storenames.indexOf(\"_changes\") === -1) storenames.push(\"_changes\"); // Otherwise, firefox will hang... (I've reported the bug to Mozilla@Bugzilla)\n            }\n            // Call original db._createTransaction()\n            var trans = origFunc.call(this, mode, storenames, dbschema, parent);\n            // If this transaction is bound to any observable table, make sure to add changes when transaction completes.\n            if (addChanges) {\n                trans._lastWrittenRevision = 0;\n                trans.on('complete', function () {\n                    if (trans._lastWrittenRevision) {\n                        // Changes were written in this transaction.\n                        if (!parent) {\n                            // This is root-level transaction, i.e. a physical commit has happened.\n                            // Delay-trigger a wakeup call:\n                            if (wakeupObservers.timeoutHandle) clearTimeout(wakeupObservers.timeoutHandle);\n                            wakeupObservers.timeoutHandle = setTimeout(function () {\n                                delete wakeupObservers.timeoutHandle;\n                                wakeupObservers(trans._lastWrittenRevision);\n                            }, 25);\n                        } else {\n                            // This is just a virtual commit of a sub transaction.\n                            // Wait with waking up observers until root transaction has committed.\n                            // Make sure to mark root transaction so that it will wakeup observers upon commit.\n                            var rootTransaction = function findRootTransaction(trans) {\n                                return trans.parent ? findRootTransaction(trans.parent) : trans;\n                            }(parent);\n                            rootTransaction._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rootTransaction.lastWrittenRevision || 0);\n                        }\n                    }\n                });\n                // Derive \"source\" property from parent transaction by default\n                if (trans.parent && trans.parent.source) trans.source = trans.parent.source;\n            }\n            return trans;\n        };\n    });\n\n    // If Observable.latestRevsion[db.name] is undefined, set it to 0 so that comparing against it always works.\n    // You might think that it will always be undefined before this call, but in case another Dexie instance in the same\n    // window with the same database name has been created already, this static property will already be set correctly.\n    Observable.latestRevision[db.name] = Observable.latestRevision[db.name] || 0;\n\n    function wakeupObservers(lastWrittenRevision) {\n        // Make sure Observable.latestRevision[db.name] is still below our value, now when some time has elapsed and other db instances in same window possibly could have made changes too.\n        if (Observable.latestRevision[db.name] < lastWrittenRevision) {\n            // Set the static property lastRevision[db.name] to the revision of the last written change.\n            Observable.latestRevision[db.name] = lastWrittenRevision;\n            // Wakeup ourselves, and any other db instances on this window:\n            Dexie.ignoreTransaction(function () {\n                Observable.on('latestRevisionIncremented').fire(db.name, lastWrittenRevision);\n            });\n            // Observable.on.latestRevisionIncremented will only wakeup db's in current window.\n            // We need a storage event to wakeup other windwos.\n            // Since indexedDB lacks storage events, let's use the storage event from WebStorage just for\n            // the purpose to wakeup db instances in other windows.\n            localStorage.setItem('Dexie.Observable/latestRevision/' + db.name, lastWrittenRevision); // In IE, this will also wakeup our own window. However, onLatestRevisionIncremented will work around this by only running once per revision id.\n        }\n    }\n\n    db.close = override(db.close, function (origClose) {\n        return function () {\n            if (db.dynamicallyOpened()) return origClose.apply(this, arguments); // Don't observe dynamically opened databases.\n            // Teardown our framework.\n            if (wakeupObservers.timeoutHandle) {\n                clearTimeout(wakeupObservers.timeoutHandle);\n                delete wakeupObservers.timeoutHandle;\n            }\n            Observable.on('latestRevisionIncremented').unsubscribe(onLatestRevisionIncremented);\n            Observable.on('suicideNurseCall').unsubscribe(onSuicide);\n            Observable.on('intercomm').unsubscribe(onIntercomm);\n            Observable.on('beforeunload').unsubscribe(onBeforeUnload);\n            // Inform other db instances in same window that we are dying:\n            if (mySyncNode && mySyncNode.id) {\n                Observable.on.suicideNurseCall.fire(db.name, mySyncNode.id);\n                // Inform other windows as well:\n                localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. cleanup() may trigger twice per other db instance. But that doesnt to anything.\n                mySyncNode.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\n                mySyncNode.lastHeartBeat = 0;\n                db._syncNodes.put(mySyncNode); // This async operation may be cancelled since the browser is closing down now.\n                mySyncNode = null;\n            }\n\n            if (pollHandle) clearTimeout(pollHandle);\n            pollHandle = null;\n            return origClose.apply(this, arguments);\n        };\n    });\n\n    // Override Dexie.delete() in order to delete Observable.latestRevision[db.name].\n    db.delete = override(db.delete, function (origDelete) {\n        return function () {\n            return origDelete.apply(this, arguments).then(function (result) {\n                // Reset Observable.latestRevision[db.name]\n                Observable.latestRevision[db.name] = 0;\n                return result;\n            });\n        };\n    });\n\n    //\n    // The Creating/Updating/Deleting hook will make sure any change is stored to the changes table\n    //\n    function crudMonitor(table) {\n        /// <param name=\"table\" type=\"db.Table\"></param>\n        var tableName = table.name;\n\n        table.hook('creating').subscribe(function (primKey, obj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            var rv = undefined;\n            if (primKey === undefined && table.schema.primKey.uuid) {\n                primKey = rv = Observable.createUUID();\n                if (table.schema.primKey.keyPath) {\n                    Dexie.setByKeyPath(obj, table.schema.primKey.keyPath, primKey);\n                }\n            }\n\n            var change = {\n                source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                table: tableName,\n                key: primKey === undefined ? null : primKey,\n                type: CREATE,\n                obj: obj\n            };\n\n            var promise = trans.tables._changes.add(change).then(function (rev) {\n                trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                return rev;\n            });\n\n            // Wait for onsuccess so that we have the primKey if it is auto-incremented and update the change item if so.\n            this.onsuccess = function (resultKey) {\n                if (primKey != resultKey) promise._then(function () {\n                    change.key = resultKey;\n                    trans.tables._changes.put(change);\n                });\n            };\n            this.onerror = function (err) {\n                // If the main operation fails, make sure to regret the change\n                promise._then(function (rev) {\n                    // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                    trans.tables._changes.delete(rev);\n                });\n            };\n\n            return rv;\n        });\n\n        table.hook('updating').subscribe(function (mods, primKey, oldObj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            // mods may contain property paths with undefined as value if the property\n            // is being deleted. Since we cannot persist undefined we need to act\n            // like those changes is setting the value to null instead.\n            var modsWithoutUndefined = {};\n            // As of current Dexie version (1.0.3) hook may be called even if it wouldnt really change.\n            // Therefore we may do that kind of optimization here - to not add change entries if\n            // there's nothing to change.\n            var anythingChanged = false;\n            var newObj = Dexie.deepClone(oldObj);\n            for (var propPath in mods) {\n                var mod = mods[propPath];\n                if (typeof mod === 'undefined') {\n                    Dexie.delByKeyPath(newObj, propPath);\n                    modsWithoutUndefined[propPath] = null; // Null is as close we could come to deleting a property when not allowing undefined.\n                    anythingChanged = true;\n                } else {\n                    var currentValue = Dexie.getByKeyPath(oldObj, propPath);\n                    if (mod !== currentValue && JSON.stringify(mod) !== JSON.stringify(currentValue)) {\n                        Dexie.setByKeyPath(newObj, propPath, mod);\n                        modsWithoutUndefined[propPath] = mod;\n                        anythingChanged = true;\n                    }\n                }\n            }\n            if (anythingChanged) {\n                var change = {\n                    source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                    table: tableName,\n                    key: primKey,\n                    type: UPDATE,\n                    mods: modsWithoutUndefined,\n                    oldObj: oldObj,\n                    obj: newObj\n                };\n                var promise = trans.tables._changes.add(change); // Just so we get the correct revision order of the update...\n                this.onsuccess = function () {\n                    promise._then(function (rev) {\n                        trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                    });\n                };\n                this.onerror = function (err) {\n                    // If the main operation fails, make sure to regret the change.\n                    promise._then(function (rev) {\n                        // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                        trans.tables._changes.delete(rev);\n                    });\n                };\n            }\n        });\n\n        table.hook('deleting').subscribe(function (primKey, obj, trans) {\n            /// <param name=\"trans\" type=\"db.Transaction\"></param>\n            var promise = trans.tables._changes.add({\n                source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n                table: tableName,\n                key: primKey,\n                type: DELETE,\n                oldObj: obj\n            }).then(function (rev) {\n                trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n                return rev;\n            });\n            this.onerror = function () {\n                // If the main operation fails, make sure to regret the change.\n                // Using _then because if promise is already fullfilled, the standard then() would\n                // do setTimeout() and we would loose the transaction.\n                promise._then(function (rev) {\n                    // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n                    trans.tables._changes.delete(rev);\n                });\n            };\n        });\n    }\n\n    // When db opens, make sure to start monitor any changes before other db operations will start.\n    db.on(\"ready\", function startObserving() {\n        if (db.dynamicallyOpened()) return db; // Don't observe dynamically opened databases.\n        return db.table(\"_changes\").orderBy(\"rev\").last(function (lastChange) {\n            // Since startObserving() is called before database open() method, this will be the first database operation enqueued to db.\n            // Therefore we know that the retrieved value will be This query will\n            var latestRevision = lastChange ? lastChange.rev : 0;\n            mySyncNode = new SyncNode({\n                myRevision: latestRevision,\n                type: \"local\",\n                lastHeartBeat: Date.now(),\n                deleteTimeStamp: null,\n                isMaster: 0\n            });\n            if (Observable.latestRevision[db.name] < latestRevision) {\n                // Side track . For correctness whenever setting Observable.latestRevision[db.name] we must make sure the event is fired if increased:\n                // There are other db instances in same window that hasnt yet been informed about a new revision\n                Observable.latestRevision[db.name] = latestRevision;\n                Dexie.ignoreTransaction(function () {\n                    Observable.on.latestRevisionIncremented.fire(latestRevision);\n                });\n            }\n            // Add new sync node or if this is a reopening of the database after a close() call, update it.\n            return db.transaction('rw', '_syncNodes', function () {\n                db._syncNodes.where('isMaster').equals(1).count(function (anyMasterNode) {\n                    if (!anyMasterNode) {\n                        // There's no master node. Let's take that role then.\n                        mySyncNode.isMaster = 1;\n                    }\n                    // Add our node to DB and start subscribing to events\n                    db._syncNodes.add(mySyncNode).then(function () {\n                        Observable.on('latestRevisionIncremented', onLatestRevisionIncremented); // Wakeup when a new revision is available.\n                        Observable.on('beforeunload', onBeforeUnload);\n                        Observable.on('suicideNurseCall', onSuicide);\n                        Observable.on('intercomm', onIntercomm);\n                        // Start polling for changes and do cleanups:\n                        pollHandle = setTimeout(poll, LOCAL_POLL);\n                    });\n                });\n            }).then(function () {\n                cleanup();\n            });\n            //cleanup();\n            //});\n        });\n    }, true); // True means the on(ready) event will survive a db reopening (db.close() / db.open()).\n\n    var handledRevision = 0;\n\n    function onLatestRevisionIncremented(dbname, latestRevision) {\n        if (dbname === db.name) {\n            if (handledRevision >= latestRevision) return; // Make sure to only run once per revision. (Workaround for IE triggering storage event on same window)\n            handledRevision = latestRevision;\n            Dexie.vip(function () {\n                readChanges(latestRevision).catch('DatabaseClosedError', function (e) {\n                    // Handle database closed error gracefully while reading changes.\n                    // Don't bubble to db.on.error or Promise.on.error.\n                    // Even though we intercept the close() method, it might be called when in the middle of\n                    // reading changes and then that flow will cancel with DatabaseClosedError.\n                });\n            });\n        }\n    }\n\n    function readChanges(latestRevision, recursion, wasPartial) {\n        // Whenever changes are read, fire db.on(\"changes\") with the array of changes. Eventually, limit the array to 1000 entries or so (an entire database is\n        // downloaded from server AFTER we are initiated. For example, if first sync call fails, then after a while we get reconnected. However, that scenario\n        // should be handled in case database is totally empty we should fail if sync is not available)\n        if (!recursion && readChanges.ongoingOperation) {\n            // We are already reading changes. Prohibit a parallell execution of this which would lead to duplicate trigging of 'changes' event.\n            // Instead, the callback in toArray() will always check Observable.latestRevision[db.name] to see if it has changed and if so, re-launch readChanges().\n            // The caller should get the Promise instance from the ongoing operation so that the then() method will resolve when operation is finished.\n            return readChanges.ongoingOperation;\n        }\n\n        var partial = false;\n        var ourSyncNode = mySyncNode; // Because mySyncNode can suddenly be set to null on database close, and worse, can be set to a new value if database is reopened.\n        if (!ourSyncNode) {\n            return Promise.reject(\"Database closed\");\n        }\n        var LIMIT = 1000;\n        var promise = db._changes.where(\"rev\").above(ourSyncNode.myRevision).limit(LIMIT).toArray(function (changes) {\n            if (changes.length > 0) {\n                var lastChange = changes[changes.length - 1];\n                partial = changes.length === LIMIT;\n                db.on('changes').fire(changes, partial);\n                ourSyncNode.myRevision = lastChange.rev;\n            } else if (wasPartial) {\n                // No more changes, BUT since we have triggered on('changes') with partial = true,\n                // we HAVE TO trigger changes again with empty list and partial = false\n                db.on('changes').fire([], false);\n            }\n\n            return db.table(\"_syncNodes\").update(ourSyncNode, {\n                lastHeartBeat: Date.now(),\n                deleteTimeStamp: null, // Reset \"deleteTimeStamp\" flag if it was there.\n                myRevision: ourSyncNode.myRevision\n            });\n        }).then(function (nodeWasUpdated) {\n            if (!nodeWasUpdated) {\n                // My node has been deleted. We must have been lazy and got removed by another node.\n                if (browserIsShuttingDown) {\n                    throw new Error(\"Browser is shutting down\");\n                } else {\n                    db.close();\n                    console.error(\"Out of sync\"); // TODO: What to do? Reload the page?\n                    if (global.location) global.location.reload(true);\n                    throw new Error(\"Out of sync\"); // Will make current promise reject\n                }\n            }\n\n            // Check if more changes have come since we started reading changes in the first place. If so, relaunch readChanges and let the ongoing promise not\n            // resolve until all changes have been read.\n            if (partial || Observable.latestRevision[db.name] > ourSyncNode.myRevision) {\n                // Either there were more than 1000 changes or additional changes where added while we were reading these changes,\n                // In either case, call readChanges() again until we're done.\n                return readChanges(Observable.latestRevision[db.name], (recursion || 0) + 1, partial);\n            }\n        }).finally(function () {\n            delete readChanges.ongoingOperation;\n        });\n\n        if (!recursion) {\n            readChanges.ongoingOperation = promise;\n        }\n        return promise;\n    }\n\n    function poll() {\n        pollHandle = null;\n        var currentInstance = mySyncNode.id;\n        Dexie.vip(function () {\n            // VIP ourselves. Otherwise we might not be able to consume intercomm messages from master node before database has finished opening. This would make DB stall forever. Cannot rely on storage-event since it may not always work in some browsers of different processes.\n            readChanges(Observable.latestRevision[db.name]).then(cleanup).then(consumeIntercommMessages).catch('DatabaseClosedError', function (e) {\n                // Handle database closed error gracefully while reading changes.\n                // Don't bubble to db.on.error or Promise.on.error.\n                // Even though we intercept the close() method, it might be called when in the middle of\n                // reading changes and then that flow will cancel with DatabaseClosedError.\n            }).finally(function () {\n                // Poll again in given interval:\n                if (mySyncNode && mySyncNode.id === currentInstance) {\n                    pollHandle = setTimeout(poll, LOCAL_POLL);\n                }\n            });\n        });\n    }\n\n    function cleanup() {\n        var ourSyncNode = mySyncNode;\n        if (!ourSyncNode) return Promise.reject(\"Database closed\");\n        return db.transaction('rw', '_syncNodes', '_changes', '_intercomm', function () {\n            // Cleanup dead local nodes that has no heartbeat for over a minute\n            // Dont do the following:\n            //nodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).and(function (node) { return node.type == \"local\"; }).delete();\n            // Because client may have been in hybernate mode and recently woken up. That would lead to deletion of all nodes.\n            // Instead, we should mark any old nodes for deletion in a minute or so. If they still dont wakeup after that minute we could consider them dead.\n            var weBecameMaster = false;\n            db._syncNodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).and(function (node) {\n                return node.type === 'local';\n            }).modify(function (node) {\n                if (node.deleteTimeStamp && node.deleteTimeStamp < Date.now()) {\n                    // Delete the node.\n                    delete this.value;\n                    // Cleanup localStorage \"deadnode:\" entry for this node (localStorage API was used to wakeup other windows (onstorage event) - an event type missing in indexedDB.)\n                    localStorage.removeItem('Dexie.Observable/deadnode:' + node.id + '/' + db.name);\n                    // Check if we are deleting a master node\n                    if (node.isMaster) {\n                        // The node we are deleting is master. We must take over that role.\n                        // OK to call nodes.update(). No need to call Dexie.vip() because nodes is opened in existing transaction!\n                        db._syncNodes.update(ourSyncNode, { isMaster: 1 });\n                        weBecameMaster = true;\n                    }\n                    // Cleanup intercomm messages destinated to the node being deleted:\n                    db._intercomm.where(\"destinationNode\").equals(node.id).modify(function (msg) {\n                        // OK to call intercomm. No need to call Dexie.vip() because intercomm is opened in existing transaction!\n                        // Delete the message from DB and if someone is waiting for reply, let ourselved answer the request.\n                        delete this.value;\n                        if (msg.wantReply) {\n                            // Message wants a reply, meaning someone must take over its messages when it dies. Let us be that one!\n                            Dexie.ignoreTransaction(function () {\n                                consumeMessage(msg);\n                            });\n                        }\n                    });\n                } else if (!node.deleteTimeStamp) {\n                    // Mark the node for deletion\n                    node.deleteTimeStamp = Date.now() + HIBERNATE_GRACE_PERIOD;\n                }\n            }).then(function () {\n                // Cleanup old revisions that no node is interested of.\n                Observable.deleteOldChanges(db);\n                return db.on(\"cleanup\").fire(weBecameMaster);\n            });\n        });\n    }\n\n    function onBeforeUnload(event) {\n        // Mark our own sync node for deletion.\n        if (!mySyncNode) return;\n        browserIsShuttingDown = true;\n        mySyncNode.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\n        mySyncNode.lastHeartBeat = 0;\n        db._syncNodes.put(mySyncNode); // This async operation may be cancelled since the browser is closing down now.\n        Observable.wereTheOneDying = true; // If other nodes in same window wakes up by this call, make sure they dont start taking over mastership and stuff...\n        // Inform other windows that we're gone, so that they may take over our role if needed. Setting localStorage item below will trigger Observable.onStorage, which will trigger onSuicie() below:\n        localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. However, that is doublechecked in nursecall subscriber below.\n    }\n\n    function onSuicide(dbname, nodeID) {\n        if (dbname === db.name && !Observable.wereTheOneDying) {\n            // Make sure it's dead indeed. Second bullet. Why? Because it has marked itself for deletion in the onbeforeunload event, which is fired just before window dies.\n            // It's own call to put() may have been cancelled.\n            // Note also that in IE, this event may be called twice, but that doesnt harm!\n            Dexie.vip(function () {\n                db._syncNodes.update(nodeID, { deleteTimeStamp: 1, lastHeartBeat: 0 }).then(cleanup);\n            });\n        }\n    }\n\n    //\n    // Intercommunication between nodes\n    //\n    // Enable inter-process communication between browser windows\n\n    var requestsWaitingForReply = {};\n\n    db.sendMessage = function (type, message, destinationNode, options) {\n        /// <param name=\"type\" type=\"String\">Type of message</param>\n        /// <param name=\"message\">Message to send</param>\n        /// <param name=\"destinationNode\" type=\"Number\">ID of destination node</param>\n        /// <param name=\"options\" type=\"Object\" optional=\"true\">{wantReply: Boolean, isFailure: Boolean, requestId: Number}. If wantReply, the returned promise will complete with the reply from remote. Otherwise it will complete when message has been successfully sent.</param>\n        if (!mySyncNode) return Promise.reject(\"Database closed\");\n        options = options || {};\n        var msg = { message: message, destinationNode: destinationNode, sender: mySyncNode.id, type: type };\n        Dexie.extend(msg, options); // wantReply: wantReply, success: !isFailure, requestId: ...\n        var tables = [\"_intercomm\"];\n        if (options.wantReply) tables.push(\"_syncNodes\"); // If caller wants a reply, include \"_syncNodes\" in transaction to check that there's a reciever there. Otherwise, new master will get it.\n        return db.transaction('rw?', tables, function () {\n            if (options.wantReply) {\n                // Check that there is a reciever there to take the request.\n                return db._syncNodes.where('id').equals(destinationNode).count(function (recieverAlive) {\n                    if (recieverAlive) return addMessage(msg);else return db._syncNodes.where('isMaster').above(0).first(function (masterNode) {\n                        msg.destinationNode = masterNode.id;\n                        return addMessage(msg);\n                    });\n                });\n            } else {\n                addMessage(msg); // No need to return Promise. Caller dont need a reply.\n            }\n\n            function addMessage(msg) {\n                return db._intercomm.add(msg).then(function (messageId) {\n                    localStorage.setItem(\"Dexie.Observable/intercomm/\" + db.name, messageId.toString());\n                    Dexie.ignoreTransaction(function () {\n                        Observable.on.intercomm.fire(db.name);\n                    });\n                    if (options.wantReply) {\n                        return new Promise(function (resolve, reject) {\n                            requestsWaitingForReply[messageId.toString()] = { resolve: resolve, reject: reject };\n                        });\n                    }\n                });\n            }\n        });\n    };\n\n    db.broadcastMessage = function (type, message, bIncludeSelf) {\n        if (!mySyncNode) return Promise.reject(\"Database closed\");\n        var mySyncNodeId = mySyncNode.id;\n        db._syncNodes.each(function (node) {\n            if (node.type === 'local' && (bIncludeSelf || node.id !== mySyncNodeId)) {\n                db.sendMessage(type, message, node.id);\n            }\n        });\n    };\n\n    db.observable = {};\n    db.observable.SyncNode = SyncNode;\n\n    function consumeIntercommMessages() {\n        // Check if we got messages:\n        if (!mySyncNode) return Promise.reject(\"Database closed\");\n        return db.table('_intercomm').where(\"destinationNode\").equals(mySyncNode.id).modify(function (msg) {\n            // For each message, fire the event and remove message.\n            delete this.value;\n            Dexie.ignoreTransaction(function () {\n                consumeMessage(msg);\n            });\n        });\n    }\n\n    function consumeMessage(msg) {\n        if (msg.type === 'response') {\n            // This is a response. Lookup pending request and fulfill it's promise.\n            var request = requestsWaitingForReply[msg.requestId.toString()];\n            if (request) {\n                if (msg.isFailure) {\n                    request.reject(msg.message.error);\n                } else {\n                    request.resolve(msg.message.result);\n                }\n                delete requestsWaitingForReply[msg.requestId.toString()];\n            }\n        } else {\n            // This is a message or request. Fire the event and add an API for the subscriber to use if reply is requested\n            msg.resolve = function (result) {\n                db.sendMessage('response', { result: result }, msg.sender, { requestId: msg.id });\n            };\n            msg.reject = function (error) {\n                db.sendMessage('response', { error: error.toString() }, msg.sender, { isFailure: true, requestId: msg.id });\n            };\n            var message = msg.message;\n            delete msg.message;\n            Dexie.extend(msg, message);\n            db.on.message.fire(msg);\n        }\n    }\n\n    function onIntercomm(dbname) {\n        // When storage event trigger us to check\n        if (dbname === db.name) {\n            consumeIntercommMessages();\n        }\n    }\n}\n\n//\n// Help functions\n//\n\nfunction nop() {};\n\nfunction promisableChain(f1, f2) {\n    if (f1 === nop) return f2;\n    return function () {\n        var res = f1.apply(this, arguments);\n        if (res && typeof res.then === 'function') {\n            var thiz = this,\n                args = arguments;\n            return res.then(function () {\n                return f2.apply(thiz, args);\n            });\n        }\n        return f2.apply(this, arguments);\n    };\n}\n\n//\n// Static properties and methods\n//\n\nObservable.latestRevision = {}; // Latest revision PER DATABASE. Example: Observable.latestRevision.FriendsDB = 37;\nObservable.on = Dexie.Events(null, \"latestRevisionIncremented\", \"suicideNurseCall\", \"intercomm\", \"beforeunload\"); // fire(dbname, value);\nObservable.createUUID = function () {\n    // Decent solution from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n    var d = Date.now();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : r & 0x7 | 0x8).toString(16);\n    });\n    return uuid;\n};\n\nObservable.deleteOldChanges = function (db) {\n    db._syncNodes.orderBy(\"myRevision\").first(function (oldestNode) {\n        var timeout = Date.now() + 300,\n            timedout = false;\n        db._changes.where(\"rev\").below(oldestNode.myRevision).until(function () {\n            return timedout = Date.now() > timeout;\n        }).delete().then(function () {\n            // If not done garbage collecting, reschedule a continuation of it until done.\n            if (timedout) setTimeout(function () {\n                Observable.deleteOldChanges(db);\n            }, 10);\n        });\n    });\n};\n\nObservable._onStorage = function onStorage(event) {\n    // We use the onstorage event to trigger onLatestRevisionIncremented since we will wake up when other windows modify the DB as well!\n    if (event.key.indexOf(\"Dexie.Observable/\") === 0) {\n        // For example \"Dexie.Observable/latestRevision/FriendsDB\"\n        var parts = event.key.split('/');\n        var prop = parts[1];\n        var dbname = parts[2];\n        if (prop === 'latestRevision') {\n            var rev = parseInt(event.newValue, 10);\n            if (!isNaN(rev) && rev > Observable.latestRevision[dbname]) {\n                Observable.latestRevision[dbname] = rev;\n                Dexie.ignoreTransaction(function () {\n                    Observable.on('latestRevisionIncremented').fire(dbname, rev);\n                });\n            }\n        } else if (prop.indexOf(\"deadnode:\") === 0) {\n            var nodeID = parseInt(prop.split(':')[1], 10);\n            if (event.newValue) {\n                Observable.on.suicideNurseCall.fire(dbname, nodeID);\n            }\n        } else if (prop === 'intercomm') {\n            if (event.newValue) {\n                Observable.on.intercomm.fire(dbname);\n            }\n        }\n    }\n};\n\nObservable._onBeforeUnload = function () {\n    Observable.on.beforeunload.fire();\n};\n\nObservable.localStorageImpl = global.localStorage;\n\n//\n// Map window events to static events in Dexie.Observable:\n//\nif (global.addEventListener) {\n    global.addEventListener(\"storage\", Observable._onStorage);\n    global.addEventListener(\"beforeunload\", Observable._onBeforeUnload);\n}\n// Register addon:\nDexie.Observable = Observable;\nDexie.addons.push(Observable);"],"names":[],"mappings":"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"}